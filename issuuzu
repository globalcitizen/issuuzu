#!/usr/bin/php
<?php
if(isset($argv[1])) {
 $url = $argv[1];
}
else { usage(); }

if(!preg_match('/^https?:\/\/.*$/i',$url)) {
 print "ERROR: Supplied string '$url' does not appear to be an HTTP(S) URL\n";
 usage();
}

print "Fetching URL '$url'\n";
$initial_page_data = http_fetch($url);
#print "Fetched data:\n";
#print $initial_page_data . "\n";
preg_match_all("/(?:https:\/\/e.issuu.com\/embed.html[^\"]+?)\"/ism",$initial_page_data,$matches);
$publication_count = count($matches[0]);
if($publication_count == 0) {
 print "No matching embedded URLs in source of '$url', aborting.\n";
 exit(2);
}
print "Found $publication_count publications.\n";
$pubno = 1;
foreach($matches[0] as $matching_url) {
 $matching_url = html_entity_decode($matching_url);
 print "Publication #$pubno of $publication_count total is at $matching_url\n";
 download_publication($matching_url);
 $pubno++;
}
exit(0);

function download_publication($matching_url) {
 print "Downloading publication at $matching_url\n";
 if(preg_match("/u=(.*?)[&\"$]/",$matching_url,$matches)) {
  $matching_url_user = $matches[1];
  print " - User ID is $matching_url_user\n";
 }
 else {
  print "ERROR: unable to extract user (u=...) portion of matching URL.\n";
  exit(3);
 }
 if(preg_match("/d=(.*?)[&\"$]/",$matching_url,$matches)) {
  $matching_url_data = $matches[1];
  print " - Data ID is $matching_url_data\n";
 }
 else {
  print "ERROR: unable to extract data (d=...) portion of matching URL.\n";
  exit(3);
 }
 
 print "Fetching matching embedded URL... ";
 $embedded_page_data = http_fetch($matching_url);
 print "OK\n";
 #print "Fetched embedded page data:\n";
 #print $embedded_page_data . "\n";

 $manufactured_url = 'https://reader3.isu.pub/' . $matching_url_user . '/' . $matching_url_data . '/reader3_4.json';
 print "Fetching URL: $manufactured_url\n";

 $fetched_json = http_fetch($manufactured_url);

 #print "found JSON ... $fetched_json\n";

 # now we want document/pages/...

 if($parsed_json = json_decode($fetched_json,1)) {
  # continue...
 }
 else {
  print "ERROR: Failed to decode JSON.\n";
  exit(5);
 }

 print "Downloading " . count($parsed_json['document']['pages']) . " pages...";

 foreach($parsed_json['document']['pages'] as $page) {
  http_fetch_file('https://' . $page['imageUri'],basename($page['imageUri']));
  print ".";
 }
 print " done.\n";

 # now convert to pdf using imagemagick

 print "Converting to PDF ... ";
 $output_filename = $matching_url_data . ".pdf";
 shell_exec("convert page_?.jpg page_??.jpg page_???.jpg " . escapeshellarg($output_filename));
 print $output_filename . "\n";

 print "Cleaning up single page image files ... ";
 shell_exec("rm page_?.jpg page_??.jpg page_???.jpg");
 print "done.\n";

 return true;
}

function http_fetch($url) {
 $cmd = "curl --no-head --silent --compressed " . escapeshellarg($url) . "-H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5666.197 Safari/537.36' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8' -H 'Accept-Language: en-US,en;q=0.5' -H 'Accept-Encoding: gzip, deflate, br' -H 'DNT: 1' -H 'Connection: keep-alive' -H 'Upgrade-Insecure-Requests: 1' -H 'Sec-Fetch-Dest: document' -H 'Sec-Fetch-Mode: navigate' -H 'Sec-Fetch-Site: same-origin' -H 'sec-ch-ua-platform: Windows' -H 'sec-ch-ua: Google Chrome;v=113, Chromium;v=113, Not=A?Brand;v=24' -H 'TE: trailers'";
 return shell_exec($cmd);
}

function http_fetch_file($url,$file) {
 $cmd = "curl --no-head --silent --compressed -o " . escapeshellarg($file) . " " . escapeshellarg($url) . "-H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5666.197 Safari/537.36' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8' -H 'Accept-Language: en-US,en;q=0.5' -H 'Accept-Encoding: gzip, deflate, br' -H 'DNT: 1' -H 'Connection: keep-alive' -H 'Upgrade-Insecure-Requests: 1' -H 'Sec-Fetch-Dest: document' -H 'Sec-Fetch-Mode: navigate' -H 'Sec-Fetch-Site: same-origin' -H 'sec-ch-ua-platform: Windows' -H 'sec-ch-ua: Google Chrome;v=113, Chromium;v=113, Not=A?Brand;v=24' -H 'TE: trailers'";
 return shell_exec($cmd);
}

function usage() {
 global $argv;
 print $argv[0] . " <url>\n";
 print " .. where <url> is an http or https URL\n";
 exit(1);
}
?>
